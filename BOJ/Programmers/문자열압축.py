# 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 
# 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
# 간단한 예로 "aabbaccc"의 경우 "2a2ba3c"(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와
# 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 
# 예를 들면, "abcabcdede"와 같은 문자열은 전혀 압축되지 않습니다. 
# 
# "어피치"는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 
# 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.
# 예를 들어, "ababcdcdababcdcd"의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 
# 2개 단위로 잘라서 압축한다면 "2ab2cd2ab2cd"로 표현할 수 있습니다. 
# 다른 방법으로 8개 단위로 잘라서 압축한다면 "2ababcdcd"로 표현할 수 있으며, 
# 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

# 다른 예로, "abcabcdede"와 같은 경우, 문자를 2개 단위로 잘라서 압축하면
#  "abcabc2de"가 되지만, 3개 단위로 자른다면 "2abcdede"가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다.
#  이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

# 압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 
# 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

s = "aabbaccc"

def solution(s):
    answer = 1000
    for n in range(1, len(s)//2+1):
        # n은 1부터 길이의 절반까지
        
        cnt = 1
        res = ""
        tmp = s[:n] # 젤 처음엔 첫 번째 원소 하나
        # tmp = a

        for i in range(n, n + len(s), n):
            # i는 n부터 n에 s의 길이 더한거까지, n을 간격으로

            if tmp == s[i:i+n]: 
                # 바로 다음이랑 비교, 같으면 cnt += 1
                cnt += 1
            else:
                # 바로 다음꺼랑 같지 않아 => 다른 문자열
                if cnt == 1:
                    # cnt가 1이란 소리는 처음 들어왔단 소리
                    res += tmp
                else:
                    # 이전에 이걸로 한번 압축 했었다는 소리
                    res += str(cnt)+tmp
                    tmp = s[i:i+n]
                    cnt = 1 
                    
            answer = min(answer, len(res))

    return answer